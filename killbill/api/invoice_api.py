# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from killbill.api_client import ApiClient


class InvoiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adjust_invoice_item(self, invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Adjust an invoice item  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.adjust_invoice_item(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param InvoiceItem body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param date requested_date:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: Invoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.adjust_invoice_item_with_http_info(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.adjust_invoice_item_with_http_info(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def adjust_invoice_item_with_http_info(self, invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Adjust an invoice item  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.adjust_invoice_item_with_http_info(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param InvoiceItem body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param date requested_date:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: Invoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'body', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'requested_date', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adjust_invoice_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `adjust_invoice_item`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adjust_invoice_item`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `adjust_invoice_item`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `adjust_invoice_item`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `adjust_invoice_item`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `adjust_invoice_item`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'requested_date' in params:
            query_params.append(('requestedDate', params['requested_date']))  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Invoice',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commit_invoice(self, invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Perform the invoice status transition from DRAFT to COMMITTED  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.commit_invoice(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.commit_invoice_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.commit_invoice_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def commit_invoice_with_http_info(self, invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Perform the invoice status transition from DRAFT to COMMITTED  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.commit_invoice_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commit_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `commit_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `commit_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `commit_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `commit_invoice`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `commit_invoice`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/commitInvoice', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_external_charges(self, account_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Create external charge(s)  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_external_charges(account_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: (required)
        :param list[InvoiceItem] body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param date requested_date:
        :param bool pay_invoice:
        :param list[str] plugin_property:
        :param bool auto_commit:
        :param str payment_external_key:
        :param str transaction_external_key:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: list[InvoiceItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_external_charges_with_http_info(account_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.create_external_charges_with_http_info(account_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def create_external_charges_with_http_info(self, account_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Create external charge(s)  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_external_charges_with_http_info(account_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: (required)
        :param list[InvoiceItem] body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param date requested_date:
        :param bool pay_invoice:
        :param list[str] plugin_property:
        :param bool auto_commit:
        :param str payment_external_key:
        :param str transaction_external_key:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: list[InvoiceItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'body', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'requested_date', 'pay_invoice', 'plugin_property', 'auto_commit', 'payment_external_key', 'transaction_external_key', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_external_charges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `create_external_charges`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_external_charges`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `create_external_charges`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `create_external_charges`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `create_external_charges`")  # noqa: E501

        if 'account_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['account_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_id` when calling `create_external_charges`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'requested_date' in params:
            query_params.append(('requestedDate', params['requested_date']))  # noqa: E501
        if 'pay_invoice' in params:
            query_params.append(('payInvoice', params['pay_invoice']))  # noqa: E501
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501
        if 'auto_commit' in params:
            query_params.append(('autoCommit', params['auto_commit']))  # noqa: E501
        if 'payment_external_key' in params:
            query_params.append(('paymentExternalKey', params['payment_external_key']))  # noqa: E501
        if 'transaction_external_key' in params:
            query_params.append(('transactionExternalKey', params['transaction_external_key']))  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/charges/{accountId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InvoiceItem]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_future_invoice(self, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Trigger an invoice generation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_future_invoice(account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param date target_date:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: Invoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_future_invoice_with_http_info(account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.create_future_invoice_with_http_info(account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def create_future_invoice_with_http_info(self, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Trigger an invoice generation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_future_invoice_with_http_info(account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param date target_date:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: Invoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'target_date', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_future_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `create_future_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `create_future_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `create_future_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `create_future_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'target_date' in params:
            query_params.append(('targetDate', params['target_date']))  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Invoice',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_instant_payment(self, invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Trigger a payment for invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_instant_payment(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param InvoicePayment body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool external_payment:
        :param list[str] plugin_property:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: InvoicePayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_instant_payment_with_http_info(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.create_instant_payment_with_http_info(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def create_instant_payment_with_http_info(self, invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Trigger a payment for invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_instant_payment_with_http_info(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param InvoicePayment body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool external_payment:
        :param list[str] plugin_property:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: InvoicePayment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'body', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'external_payment', 'plugin_property', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_instant_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `create_instant_payment`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_instant_payment`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `create_instant_payment`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `create_instant_payment`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `create_instant_payment`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `create_instant_payment`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'external_payment' in params:
            query_params.append(('externalPayment', params['external_payment']))  # noqa: E501
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvoicePayment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_invoice_custom_fields(self, invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Add custom fields to invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_invoice_custom_fields(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param list[CustomField] body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: list[CustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_invoice_custom_fields_with_http_info(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.create_invoice_custom_fields_with_http_info(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def create_invoice_custom_fields_with_http_info(self, invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Add custom fields to invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_invoice_custom_fields_with_http_info(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param list[CustomField] body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: list[CustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'body', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_invoice_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `create_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `create_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `create_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `create_invoice_custom_fields`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `create_invoice_custom_fields`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/customFields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CustomField]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_invoice_tags(self, invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Add tags to invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_invoice_tags(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param list[str] tag_def:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: list[Tag]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_invoice_tags_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.create_invoice_tags_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def create_invoice_tags_with_http_info(self, invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Add tags to invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_invoice_tags_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param list[str] tag_def:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: list[Tag]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'tag_def', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_invoice_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `create_invoice_tags`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `create_invoice_tags`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `create_invoice_tags`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `create_invoice_tags`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `create_invoice_tags`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'tag_def' in params:
            query_params.append(('tagDef', params['tag_def']))  # noqa: E501
            collection_formats['tagDef'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Tag]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_migration_invoice(self, account_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Create a migration invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_migration_invoice(account_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: (required)
        :param list[InvoiceItem] body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param date target_date:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: Invoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_migration_invoice_with_http_info(account_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.create_migration_invoice_with_http_info(account_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def create_migration_invoice_with_http_info(self, account_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Create a migration invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_migration_invoice_with_http_info(account_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: (required)
        :param list[InvoiceItem] body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param date target_date:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: Invoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'body', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'target_date', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_migration_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `create_migration_invoice`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_migration_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `create_migration_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `create_migration_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `create_migration_invoice`")  # noqa: E501

        if 'account_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['account_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_id` when calling `create_migration_invoice`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'target_date' in params:
            query_params.append(('targetDate', params['target_date']))  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/migration/{accountId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Invoice',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cba(self, invoice_id, invoice_item_id, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Delete a CBA item  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_cba(invoice_id, invoice_item_id, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str invoice_item_id: (required)
        :param str account_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_cba_with_http_info(invoice_id, invoice_item_id, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cba_with_http_info(invoice_id, invoice_item_id, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def delete_cba_with_http_info(self, invoice_id, invoice_item_id, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Delete a CBA item  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_cba_with_http_info(invoice_id, invoice_item_id, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str invoice_item_id: (required)
        :param str account_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'invoice_item_id', 'account_id', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cba" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `delete_cba`")  # noqa: E501
        # verify the required parameter 'invoice_item_id' is set
        if ('invoice_item_id' not in params or
                params['invoice_item_id'] is None):
            raise ValueError("Missing the required parameter `invoice_item_id` when calling `delete_cba`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_cba`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `delete_cba`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `delete_cba`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `delete_cba`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `delete_cba`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        if 'invoice_item_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_item_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_item_id` when calling `delete_cba`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501
        if 'invoice_item_id' in params:
            path_params['invoiceItemId'] = params['invoice_item_id']  # noqa: E501

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/{invoiceItemId}/cba', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_invoice_custom_fields(self, invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Remove custom fields from invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_invoice_custom_fields(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param list[str] custom_field:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_invoice_custom_fields_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_invoice_custom_fields_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def delete_invoice_custom_fields_with_http_info(self, invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Remove custom fields from invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_invoice_custom_fields_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param list[str] custom_field:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'custom_field', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_invoice_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `delete_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `delete_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `delete_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `delete_invoice_custom_fields`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `delete_invoice_custom_fields`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'custom_field' in params:
            query_params.append(('customField', params['custom_field']))  # noqa: E501
            collection_formats['customField'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/customFields', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_invoice_tags(self, invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Remove tags from invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_invoice_tags(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param list[str] tag_def:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_invoice_tags_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_invoice_tags_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def delete_invoice_tags_with_http_info(self, invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Remove tags from invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_invoice_tags_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param list[str] tag_def:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'tag_def', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_invoice_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `delete_invoice_tags`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `delete_invoice_tags`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `delete_invoice_tags`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `delete_invoice_tags`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `delete_invoice_tags`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'tag_def' in params:
            query_params.append(('tagDef', params['tag_def']))  # noqa: E501
            collection_formats['tagDef'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/tags', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_dry_run_invoice(self, body, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Generate a dryRun invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generate_dry_run_invoice(body, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param InvoiceDryRun body: (required)
        :param str account_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param date target_date:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: Invoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.generate_dry_run_invoice_with_http_info(body, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_dry_run_invoice_with_http_info(body, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def generate_dry_run_invoice_with_http_info(self, body, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Generate a dryRun invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generate_dry_run_invoice_with_http_info(body, account_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param InvoiceDryRun body: (required)
        :param str account_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param date target_date:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: Invoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'account_id', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'target_date', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_dry_run_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `generate_dry_run_invoice`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `generate_dry_run_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `generate_dry_run_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `generate_dry_run_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `generate_dry_run_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'target_date' in params:
            query_params.append(('targetDate', params['target_date']))  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/dryRun', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Invoice',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_catalog_translation(self, locale, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieves the catalog translation for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_catalog_translation(locale, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str locale: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_catalog_translation_with_http_info(locale, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_catalog_translation_with_http_info(locale, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def get_catalog_translation_with_http_info(self, locale, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieves the catalog translation for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_catalog_translation_with_http_info(locale, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str locale: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale', 'x_killbill_api_key', 'x_killbill_api_secret']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_catalog_translation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locale' is set
        if ('locale' not in params or
                params['locale'] is None):
            raise ValueError("Missing the required parameter `locale` when calling `get_catalog_translation`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `get_catalog_translation`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `get_catalog_translation`")  # noqa: E501

        if 'locale' in params and not re.search('.*', params['locale']):  # noqa: E501
            raise ValueError("Invalid value for parameter `locale` when calling `get_catalog_translation`, must conform to the pattern `/.*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'locale' in params:
            path_params['locale'] = params['locale']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/catalogTranslation/{locale}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice(self, invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieve an invoice by id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice(invoice_id, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool with_items:
        :param bool with_children_items:
        :param str audit:
        :return: Invoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_invoice_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def get_invoice_with_http_info(self, invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieve an invoice by id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool with_items:
        :param bool with_children_items:
        :param str audit:
        :return: Invoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'x_killbill_api_key', 'x_killbill_api_secret', 'with_items', 'with_children_items', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `get_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `get_invoice`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `get_invoice`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'with_items' in params:
            query_params.append(('withItems', params['with_items']))  # noqa: E501
        if 'with_children_items' in params:
            query_params.append(('withChildrenItems', params['with_children_items']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Invoice',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_as_html(self, invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Render an invoice as HTML  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_as_html(invoice_id, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_invoice_as_html_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_as_html_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def get_invoice_as_html_with_http_info(self, invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Render an invoice as HTML  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_as_html_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'x_killbill_api_key', 'x_killbill_api_secret']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_as_html" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_invoice_as_html`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `get_invoice_as_html`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `get_invoice_as_html`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `get_invoice_as_html`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_by_number(self, invoice_number, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieve an invoice by number  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_by_number(invoice_number, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param int invoice_number: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool with_items:
        :param bool with_children_items:
        :param str audit:
        :return: Invoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_invoice_by_number_with_http_info(invoice_number, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_by_number_with_http_info(invoice_number, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def get_invoice_by_number_with_http_info(self, invoice_number, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieve an invoice by number  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_by_number_with_http_info(invoice_number, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param int invoice_number: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool with_items:
        :param bool with_children_items:
        :param str audit:
        :return: Invoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_number', 'x_killbill_api_key', 'x_killbill_api_secret', 'with_items', 'with_children_items', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_by_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_number' is set
        if ('invoice_number' not in params or
                params['invoice_number'] is None):
            raise ValueError("Missing the required parameter `invoice_number` when calling `get_invoice_by_number`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `get_invoice_by_number`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `get_invoice_by_number`")  # noqa: E501

        if 'invoice_number' in params and not re.search('[0-9]+', params['invoice_number']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_number` when calling `get_invoice_by_number`, must conform to the pattern `/[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_number' in params:
            path_params['invoiceNumber'] = params['invoice_number']  # noqa: E501

        query_params = []
        if 'with_items' in params:
            query_params.append(('withItems', params['with_items']))  # noqa: E501
        if 'with_children_items' in params:
            query_params.append(('withChildrenItems', params['with_children_items']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceNumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Invoice',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_custom_fields(self, invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieve invoice custom fields  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_custom_fields(invoice_id, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param str audit:
        :return: list[CustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_invoice_custom_fields_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_custom_fields_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def get_invoice_custom_fields_with_http_info(self, invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieve invoice custom fields  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_custom_fields_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param str audit:
        :return: list[CustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'x_killbill_api_key', 'x_killbill_api_secret', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `get_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `get_invoice_custom_fields`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `get_invoice_custom_fields`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/customFields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CustomField]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_mp_template(self, locale, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieves the manualPay invoice template for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_mp_template(locale, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str locale: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_invoice_mp_template_with_http_info(locale, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_mp_template_with_http_info(locale, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def get_invoice_mp_template_with_http_info(self, locale, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieves the manualPay invoice template for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_mp_template_with_http_info(locale, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str locale: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale', 'x_killbill_api_key', 'x_killbill_api_secret']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_mp_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locale' is set
        if ('locale' not in params or
                params['locale'] is None):
            raise ValueError("Missing the required parameter `locale` when calling `get_invoice_mp_template`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `get_invoice_mp_template`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `get_invoice_mp_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locale' in params:
            path_params['locale'] = params['locale']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/manualPayTemplate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_tags(self, invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieve invoice tags  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_tags(invoice_id, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool included_deleted:
        :param str audit:
        :return: list[Tag]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_invoice_tags_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_tags_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def get_invoice_tags_with_http_info(self, invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieve invoice tags  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_tags_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool included_deleted:
        :param str audit:
        :return: list[Tag]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'x_killbill_api_key', 'x_killbill_api_secret', 'included_deleted', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_invoice_tags`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `get_invoice_tags`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `get_invoice_tags`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `get_invoice_tags`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'included_deleted' in params:
            query_params.append(('includedDeleted', params['included_deleted']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Tag]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_template(self, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieves the invoice template for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_template(x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_invoice_template_with_http_info(x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_template_with_http_info(x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def get_invoice_template_with_http_info(self, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieves the invoice template for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_template_with_http_info(x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_killbill_api_key', 'x_killbill_api_secret']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `get_invoice_template`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `get_invoice_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_translation(self, locale, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieves the invoice translation for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_translation(locale, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str locale: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_invoice_translation_with_http_info(locale, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_translation_with_http_info(locale, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def get_invoice_translation_with_http_info(self, locale, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieves the invoice translation for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoice_translation_with_http_info(locale, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str locale: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale', 'x_killbill_api_key', 'x_killbill_api_secret']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_translation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locale' is set
        if ('locale' not in params or
                params['locale'] is None):
            raise ValueError("Missing the required parameter `locale` when calling `get_invoice_translation`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `get_invoice_translation`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `get_invoice_translation`")  # noqa: E501

        if 'locale' in params and not re.search('.*', params['locale']):  # noqa: E501
            raise ValueError("Invalid value for parameter `locale` when calling `get_invoice_translation`, must conform to the pattern `/.*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'locale' in params:
            path_params['locale'] = params['locale']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/translation/{locale}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoices(self, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """List invoices  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoices(x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param int offset:
        :param int limit:
        :param bool with_items:
        :param str audit:
        :return: list[Invoice]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_invoices_with_http_info(x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoices_with_http_info(x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def get_invoices_with_http_info(self, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """List invoices  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_invoices_with_http_info(x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param int offset:
        :param int limit:
        :param bool with_items:
        :param str audit:
        :return: list[Invoice]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_killbill_api_key', 'x_killbill_api_secret', 'offset', 'limit', 'with_items', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `get_invoices`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `get_invoices`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'with_items' in params:
            query_params.append(('withItems', params['with_items']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/pagination', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Invoice]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payments_for_invoice(self, invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieve payments associated with an invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_payments_for_invoice(invoice_id, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool with_plugin_info:
        :param bool with_attempts:
        :param str audit:
        :return: list[InvoicePayment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_payments_for_invoice_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payments_for_invoice_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def get_payments_for_invoice_with_http_info(self, invoice_id, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Retrieve payments associated with an invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_payments_for_invoice_with_http_info(invoice_id, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool with_plugin_info:
        :param bool with_attempts:
        :param str audit:
        :return: list[InvoicePayment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'x_killbill_api_key', 'x_killbill_api_secret', 'with_plugin_info', 'with_attempts', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payments_for_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_payments_for_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `get_payments_for_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `get_payments_for_invoice`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `get_payments_for_invoice`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'with_plugin_info' in params:
            query_params.append(('withPluginInfo', params['with_plugin_info']))  # noqa: E501
        if 'with_attempts' in params:
            query_params.append(('withAttempts', params['with_attempts']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InvoicePayment]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_invoice_custom_fields(self, invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Modify custom fields to invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_invoice_custom_fields(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param list[CustomField] body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.modify_invoice_custom_fields_with_http_info(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_invoice_custom_fields_with_http_info(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def modify_invoice_custom_fields_with_http_info(self, invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Modify custom fields to invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_invoice_custom_fields_with_http_info(invoice_id, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param list[CustomField] body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'body', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_invoice_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `modify_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `modify_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `modify_invoice_custom_fields`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `modify_invoice_custom_fields`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `modify_invoice_custom_fields`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/customFields', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_invoices(self, search_key, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Search invoices  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_invoices(search_key, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_key: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param int offset:
        :param int limit:
        :param bool with_items:
        :param str audit:
        :return: list[Invoice]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_invoices_with_http_info(search_key, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.search_invoices_with_http_info(search_key, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def search_invoices_with_http_info(self, search_key, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Search invoices  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_invoices_with_http_info(search_key, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_key: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param int offset:
        :param int limit:
        :param bool with_items:
        :param str audit:
        :return: list[Invoice]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_key', 'x_killbill_api_key', 'x_killbill_api_secret', 'offset', 'limit', 'with_items', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_invoices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_key' is set
        if ('search_key' not in params or
                params['search_key'] is None):
            raise ValueError("Missing the required parameter `search_key` when calling `search_invoices`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `search_invoices`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `search_invoices`")  # noqa: E501

        if 'search_key' in params and not re.search('.*', params['search_key']):  # noqa: E501
            raise ValueError("Invalid value for parameter `search_key` when calling `search_invoices`, must conform to the pattern `/.*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'search_key' in params:
            path_params['searchKey'] = params['search_key']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'with_items' in params:
            query_params.append(('withItems', params['with_items']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/search/{searchKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Invoice]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_catalog_translation(self, locale, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Upload the catalog translation for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_catalog_translation(locale, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str locale: (required)
        :param str body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool delete_if_exists:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upload_catalog_translation_with_http_info(locale, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_catalog_translation_with_http_info(locale, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def upload_catalog_translation_with_http_info(self, locale, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Upload the catalog translation for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_catalog_translation_with_http_info(locale, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str locale: (required)
        :param str body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool delete_if_exists:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale', 'body', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'delete_if_exists', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_catalog_translation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locale' is set
        if ('locale' not in params or
                params['locale'] is None):
            raise ValueError("Missing the required parameter `locale` when calling `upload_catalog_translation`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_catalog_translation`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `upload_catalog_translation`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `upload_catalog_translation`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `upload_catalog_translation`")  # noqa: E501

        if 'locale' in params and not re.search('.*', params['locale']):  # noqa: E501
            raise ValueError("Invalid value for parameter `locale` when calling `upload_catalog_translation`, must conform to the pattern `/.*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'locale' in params:
            path_params['locale'] = params['locale']  # noqa: E501

        query_params = []
        if 'delete_if_exists' in params:
            query_params.append(('deleteIfExists', params['delete_if_exists']))  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/catalogTranslation/{locale}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_invoice_mp_template(self, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Upload the manualPay invoice template for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_invoice_mp_template(body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool delete_if_exists:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upload_invoice_mp_template_with_http_info(body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_invoice_mp_template_with_http_info(body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def upload_invoice_mp_template_with_http_info(self, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Upload the manualPay invoice template for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_invoice_mp_template_with_http_info(body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool delete_if_exists:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'delete_if_exists', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_invoice_mp_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_invoice_mp_template`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `upload_invoice_mp_template`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `upload_invoice_mp_template`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `upload_invoice_mp_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'delete_if_exists' in params:
            query_params.append(('deleteIfExists', params['delete_if_exists']))  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/manualPayTemplate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_invoice_template(self, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Upload the invoice template for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_invoice_template(body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool delete_if_exists:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upload_invoice_template_with_http_info(body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_invoice_template_with_http_info(body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def upload_invoice_template_with_http_info(self, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Upload the invoice template for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_invoice_template_with_http_info(body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool delete_if_exists:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'delete_if_exists', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_invoice_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_invoice_template`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `upload_invoice_template`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `upload_invoice_template`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `upload_invoice_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'delete_if_exists' in params:
            query_params.append(('deleteIfExists', params['delete_if_exists']))  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/template', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_invoice_translation(self, locale, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Upload the invoice translation for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_invoice_translation(locale, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str locale: (required)
        :param str body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool delete_if_exists:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upload_invoice_translation_with_http_info(locale, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_invoice_translation_with_http_info(locale, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def upload_invoice_translation_with_http_info(self, locale, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Upload the invoice translation for the tenant  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_invoice_translation_with_http_info(locale, body, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str locale: (required)
        :param str body: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param bool delete_if_exists:
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale', 'body', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'delete_if_exists', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_invoice_translation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locale' is set
        if ('locale' not in params or
                params['locale'] is None):
            raise ValueError("Missing the required parameter `locale` when calling `upload_invoice_translation`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_invoice_translation`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `upload_invoice_translation`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `upload_invoice_translation`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `upload_invoice_translation`")  # noqa: E501

        if 'locale' in params and not re.search('.*', params['locale']):  # noqa: E501
            raise ValueError("Invalid value for parameter `locale` when calling `upload_invoice_translation`, must conform to the pattern `/.*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'locale' in params:
            path_params['locale'] = params['locale']  # noqa: E501

        query_params = []
        if 'delete_if_exists' in params:
            query_params.append(('deleteIfExists', params['delete_if_exists']))  # noqa: E501

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/translation/{locale}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def void_invoice(self, invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Perform the action of voiding an invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.void_invoice(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.void_invoice_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.void_invoice_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs)  # noqa: E501
            return data

    def void_invoice_with_http_info(self, invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, **kwargs):  # noqa: E501
        """Perform the action of voiding an invoice  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.void_invoice_with_http_info(invoice_id, x_killbill_created_by, x_killbill_api_key, x_killbill_api_secret, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invoice_id: (required)
        :param str x_killbill_created_by: (required)
        :param str x_killbill_api_key: (required)
        :param str x_killbill_api_secret: (required)
        :param str x_killbill_reason:
        :param str x_killbill_comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'x_killbill_created_by', 'x_killbill_api_key', 'x_killbill_api_secret', 'x_killbill_reason', 'x_killbill_comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method void_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `void_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_created_by' is set
        if ('x_killbill_created_by' not in params or
                params['x_killbill_created_by'] is None):
            raise ValueError("Missing the required parameter `x_killbill_created_by` when calling `void_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_key' is set
        if ('x_killbill_api_key' not in params or
                params['x_killbill_api_key'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_key` when calling `void_invoice`")  # noqa: E501
        # verify the required parameter 'x_killbill_api_secret' is set
        if ('x_killbill_api_secret' not in params or
                params['x_killbill_api_secret'] is None):
            raise ValueError("Missing the required parameter `x_killbill_api_secret` when calling `void_invoice`")  # noqa: E501

        if 'invoice_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['invoice_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `invoice_id` when calling `void_invoice`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_killbill_created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['x_killbill_created_by']  # noqa: E501
        if 'x_killbill_reason' in params:
            header_params['X-Killbill-Reason'] = params['x_killbill_reason']  # noqa: E501
        if 'x_killbill_comment' in params:
            header_params['X-Killbill-Comment'] = params['x_killbill_comment']  # noqa: E501
        if 'x_killbill_api_key' in params:
            header_params['X-Killbill-ApiKey'] = params['x_killbill_api_key']  # noqa: E501
        if 'x_killbill_api_secret' in params:
            header_params['X-Killbill-ApiSecret'] = params['x_killbill_api_secret']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/invoices/{invoiceId}/voidInvoice', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
