# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from killbill.models.audit_log import AuditLog  # noqa: F401,E501


class Credit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_amount': 'float',
        'currency': 'str',
        'invoice_id': 'str',
        'invoice_number': 'str',
        'effective_date': 'date',
        'account_id': 'str',
        'description': 'str',
        'item_details': 'str',
        'audit_logs': 'list[AuditLog]'
    }

    attribute_map = {
        'credit_amount': 'creditAmount',
        'currency': 'currency',
        'invoice_id': 'invoiceId',
        'invoice_number': 'invoiceNumber',
        'effective_date': 'effectiveDate',
        'account_id': 'accountId',
        'description': 'description',
        'item_details': 'itemDetails',
        'audit_logs': 'auditLogs'
    }

    def __init__(self, credit_amount=None, currency=None, invoice_id=None, invoice_number=None, effective_date=None, account_id=None, description=None, item_details=None, audit_logs=None):  # noqa: E501
        """Credit - a model defined in Swagger"""  # noqa: E501

        self._credit_amount = None
        self._currency = None
        self._invoice_id = None
        self._invoice_number = None
        self._effective_date = None
        self._account_id = None
        self._description = None
        self._item_details = None
        self._audit_logs = None
        self.discriminator = None

        self.credit_amount = credit_amount
        if currency is not None:
            self.currency = currency
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if effective_date is not None:
            self.effective_date = effective_date
        self.account_id = account_id
        if description is not None:
            self.description = description
        if item_details is not None:
            self.item_details = item_details
        if audit_logs is not None:
            self.audit_logs = audit_logs

    @property
    def credit_amount(self):
        """Gets the credit_amount of this Credit.  # noqa: E501


        :return: The credit_amount of this Credit.  # noqa: E501
        :rtype: float
        """
        return self._credit_amount

    @credit_amount.setter
    def credit_amount(self, credit_amount):
        """Sets the credit_amount of this Credit.


        :param credit_amount: The credit_amount of this Credit.  # noqa: E501
        :type: float
        """
        if credit_amount is None:
            raise ValueError("Invalid value for `credit_amount`, must not be `None`")  # noqa: E501

        self._credit_amount = credit_amount

    @property
    def currency(self):
        """Gets the currency of this Credit.  # noqa: E501


        :return: The currency of this Credit.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Credit.


        :param currency: The currency of this Credit.  # noqa: E501
        :type: str
        """
        allowed_values = ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SPL", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TVD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "ZWD", "BTC"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def invoice_id(self):
        """Gets the invoice_id of this Credit.  # noqa: E501


        :return: The invoice_id of this Credit.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this Credit.


        :param invoice_id: The invoice_id of this Credit.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Credit.  # noqa: E501


        :return: The invoice_number of this Credit.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Credit.


        :param invoice_number: The invoice_number of this Credit.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def effective_date(self):
        """Gets the effective_date of this Credit.  # noqa: E501


        :return: The effective_date of this Credit.  # noqa: E501
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this Credit.


        :param effective_date: The effective_date of this Credit.  # noqa: E501
        :type: date
        """

        self._effective_date = effective_date

    @property
    def account_id(self):
        """Gets the account_id of this Credit.  # noqa: E501


        :return: The account_id of this Credit.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Credit.


        :param account_id: The account_id of this Credit.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def description(self):
        """Gets the description of this Credit.  # noqa: E501


        :return: The description of this Credit.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Credit.


        :param description: The description of this Credit.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def item_details(self):
        """Gets the item_details of this Credit.  # noqa: E501


        :return: The item_details of this Credit.  # noqa: E501
        :rtype: str
        """
        return self._item_details

    @item_details.setter
    def item_details(self, item_details):
        """Sets the item_details of this Credit.


        :param item_details: The item_details of this Credit.  # noqa: E501
        :type: str
        """

        self._item_details = item_details

    @property
    def audit_logs(self):
        """Gets the audit_logs of this Credit.  # noqa: E501


        :return: The audit_logs of this Credit.  # noqa: E501
        :rtype: list[AuditLog]
        """
        return self._audit_logs

    @audit_logs.setter
    def audit_logs(self, audit_logs):
        """Sets the audit_logs of this Credit.


        :param audit_logs: The audit_logs of this Credit.  # noqa: E501
        :type: list[AuditLog]
        """

        self._audit_logs = audit_logs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Credit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
