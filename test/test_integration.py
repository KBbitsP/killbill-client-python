# coding: utf-8

#
# Copyright 2014-2017 Groupon, Inc.
# Copyright 2014-2017 The Billing Project, LLC
#
# The Billing Project, LLC licenses this file to you under the Apache License, version 2.0
# (the "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at:
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform  # noqa: E501

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import killbill
from killbill.configuration import Configuration
from killbill.models.account import Account
from killbill.models.tenant import Tenant
from killbill.models.payment_method import PaymentMethod
from killbill.models.subscription import Subscription
from killbill.models.invoice_dry_run import InvoiceDryRun
from killbill.models.invoice_item import InvoiceItem
from killbill.models.payment_transaction import PaymentTransaction
from random import choice
from string import ascii_lowercase
import time
from killbill.rest import ApiException


class TestIntegration(unittest.TestCase):
    """Account unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_integration(self):
        # Create tenant
        random_api_key = ''.join(choice(ascii_lowercase) for i in range(4))
        random_api_secret = ''.join(choice(ascii_lowercase) for i in range(5))

        config = Configuration()
        config.api_key['X-Killbill-ApiKey'] = random_api_key
        config.api_key['X-Killbill-ApiSecret'] =  random_api_secret

        api_tenant = killbill.api.TenantApi()
        body = Tenant(api_key=random_api_key, api_secret=random_api_secret)
        api_tenant.create_tenant(body, 'test')

        # Get tenant
        tenant = api_tenant.get_tenant_by_api_key(api_key=random_api_key)
        self.assertIsNotNone(tenant.tenant_id)
        self.assertEqual(random_api_key, tenant.api_key)

        # Upload XML catalog/Fetch XML catalog
        api_catalog = killbill.api.CatalogApi()
        xml_catalog = open("../resources/SpyCarBasic.xml", "r+").read()

        api_catalog.upload_catalog_xml(xml_catalog, 'test')

        # Get catalog
        catalog = api_catalog.get_catalog_xml()
        self.assertIsNotNone(catalog)

        # Create account
        api_account = killbill.api.AccountApi()
        random_external_key = ''.join(choice(ascii_lowercase) for i in range(6))
        body = Account(name='John', external_key=random_external_key, currency='USD', state='CA', country='USA')
        api_account.create_account(body, 'test')

        # Get account
        account = api_account.get_account_by_key(random_external_key)
        account_id = account.account_id
        self.assertIsNotNone(account.account_id)
        self.assertEqual(random_external_key, account.external_key)
        self.assertEqual('John', account.name)
        self.assertEqual('USD', account.currency)
        self.assertEqual('CA', account.state)
        self.assertEqual('USA', account.country)

        # Add a payment method
        body = PaymentMethod(plugin_name='__EXTERNAL_PAYMENT__', plugin_info=None)
        api_account.create_payment_method(account_id, body, 'test')

        # Get a payment method
        payment_method = api_account.get_payment_methods_for_account(account_id)
        self.assertIsNotNone(payment_method[0].payment_method_id)
        self.assertEqual(account_id, payment_method[0].account_id)
        self.assertEqual('__EXTERNAL_PAYMENT__', payment_method[0].plugin_name)

        # Tag account as AUTO_INVOICING_OFF
        tag = ["00000000-0000-0000-0000-000000000002"]
        api_account.create_account_tags(account_id, tag, 'test')

        # Get account tags
        tags = api_account.get_account_tags(account_id)
        self.assertIsNotNone(tags[0].tag_id)
        self.assertEqual("00000000-0000-0000-0000-000000000002", tags[0].tag_definition_id)
        self.assertEqual("AUTO_INVOICING_OFF", tags[0].tag_definition_name)

        # Create a subscription against plan
        api_subscription = killbill.api.SubscriptionApi()
        body = Subscription(account_id=account_id, plan_name='standard-monthly')
        api_subscription.create_subscription(body, 'test')

        # Get account bundles
        bundles = api_account.get_account_bundles(account_id)
        subscription_id = bundles[0].subscriptions[0].subscription_id

        # Get subscription
        subscription = api_subscription.get_subscription(subscription_id)
        self.assertEqual('standard-monthly', subscription.plan_name)

        time.sleep(.5)

        # Get account invoices
        invoices = api_account.get_invoices_for_account(account_id)
        self.assertEqual([], invoices)

        # Remove AUTO_INVOICING_OFF tag
        api_account.delete_account_tags(account_id, 'test', tag_def=tag)

        time.sleep(.5)

        # Get account invoices
        invoices = api_account.get_invoices_for_account(account_id)
        self.assertIsNotNone(invoices[0].invoice_id)

        # Create a dryRun invoice
        api_invoice = killbill.api.InvoiceApi()
        body = InvoiceDryRun(dry_run_type='TARGET_DATE')
        api_invoice.generate_dry_run_invoice(body, account_id, 'test')

        # Modify Plan
        body = Subscription(subscription_id=subscription_id, plan_name='super-monthly')
        api_subscription.change_subscription_plan(subscription_id, body, 'test')

        # Create external charge
        body = InvoiceItem(account_id=account_id, amount=50, currency='USD', description='My charge')
        api_invoice.create_external_charges(account_id, [body], 'test', auto_commit=True)

        # Verify account balance
        account = api_account.get_account(account_id, account_with_balance=True)
        self.assertEqual(50.0, account.account_balance)

        # Pay all unpaid invoices
        api_account.pay_all_invoices(account_id, 'test', external_payment=True)

        # Verify account balance
        account = api_account.get_account(account_id, account_with_balance=True)
        self.assertEqual(0, account.account_balance)

        # Get account invoice payments
        invoice_payments = api_account.get_invoice_payments(account_id)
        payment_id = invoice_payments[0].transactions[0].payment_id
        self.assertEqual(1, len(invoice_payments[0].transactions))

        # Create a refund
        api_payment = killbill.api.PaymentApi()
        body = PaymentTransaction(payment_id=payment_id, amount=50)
        api_payment.refund_payment(payment_id, body, 'test')

        # Get account invoice payments
        invoice_payments = api_account.get_invoice_payments(account_id)
        self.assertEqual(2, len(invoice_payments[0].transactions))
        self.assertEqual('REFUND', invoice_payments[0].transactions[1].transaction_type)

        # Cancel subscription
        api_subscription.cancel_subscription_plan(subscription_id, 'test')

        # Get subscription
        subscription = api_subscription.get_subscription(subscription_id)
        self.assertEqual('CANCELLED', subscription.state)

        pass

    def test_pagination_and_search(self):
        # Create tenant
        random_api_key = ''.join(choice(ascii_lowercase) for i in range(4))
        random_api_secret = ''.join(choice(ascii_lowercase) for i in range(5))

        config = Configuration()
        config.api_key['X-Killbill-ApiKey'] = random_api_key
        config.api_key['X-Killbill-ApiSecret'] =  random_api_secret

        api_tenant = killbill.api.TenantApi()
        body = Tenant(api_key=random_api_key, api_secret=random_api_secret)
        api_tenant.create_tenant(body, 'test')

        # Create 10 accounts with payment methods and external charges
        for x in range(0, 10):
            api_account = killbill.api.AccountApi()
            random_external_key = ''.join(choice(ascii_lowercase) for i in range(6))
            body = Account(name='John-' + str(x), external_key=random_external_key, currency='USD', state='CA',
                           country='USA')
            api_account.create_account(body, 'test')

            # Get account
            account = api_account.get_account_by_key(random_external_key)
            account_id = account.account_id

            # Add a payment method
            body = PaymentMethod(plugin_name='__EXTERNAL_PAYMENT__', plugin_info=None)
            api_account.create_payment_method(account_id, body, 'test')

            # Create external charges
            api_invoice = killbill.api.InvoiceApi()
            body = InvoiceItem(account_id=account_id, amount=50, currency='USD', description='My charge')
            api_invoice.create_external_charges(account_id, [body], 'test',
                                            auto_commit=True)

            # Pay all unpaid invoices
            api_account.pay_all_invoices(account_id, 'test', external_payment=True)

        # Pagination list accounts
        accounts = api_account.get_accounts()
        self.assertEqual(10, len(accounts))

        # Pagination list invoice
        api_invoice = killbill.api.InvoiceApi()
        invoices = api_invoice.get_invoices()
        self.assertEqual(10, len(invoices))

        # Pagination list payments
        api_payment = killbill.api.PaymentApi()
        payments = api_payment.get_payments()
        self.assertEqual(10, len(payments))

        # Search accounts
        accounts = api_account.search_accounts('John-1')
        self.assertEqual(1, len(accounts))

        # Search payments
        payments = api_payment.search_payments('SUCCESS')
        self.assertEqual(10, len(payments))

        # Search invoices
        invoices = api_invoice.search_invoices('USD')
        self.assertEqual(10, len(invoices))

        pass


if __name__ == '__main__':
    unittest.main()